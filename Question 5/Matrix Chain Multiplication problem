#include <stdio.h>
#include <limits.h>
void printOptimalParens(int i, int j, int n, int s[n][n]) {
    if (i == j) {
        printf("A%d", i + 1);
    } 
    else {
        printf("(");
        printOptimalParens(i, s[i][j], n, s);
        printOptimalParens(s[i][j] + 1, j, n, s);
        printf(")");
    }
}
void matrixChainOrder(int p[], int n) {
    int m[n][n];  
    int s[n][n];  
    for (int i = 1; i < n; i++) {
        m[i][i] = 0;
    }
    for (int L = 2; L < n; L++) {
        for (int i = 1; i < n - L + 1; i++) {
            int j = i + L - 1;
            m[i][j] = INT_MAX;
            for (int k = i; k <= j - 1; k++) {
                int q = m[i][k] + m[k + 1][j] + p[i - 1] * p[k] * p[j];
                if (q < m[i][j]) {
                    m[i][j] = q;
                    s[i][j] = k;
                }
            }
        }
    }
    printf("Minimum number of multiplications: %d\n", m[1][n - 1]);
    printf("Optimal Parenthesization: ");
    printOptimalParens(1, n - 1, n, s);
    printf("\n");
}
int main() {
    int p[] = {10, 30, 5, 60, 20};  // Represents matrices A1: 10x30, A2: 30x5, A3: 5x60 A4: 60x20
    int n = sizeof(p) / sizeof(p[0]);
    matrixChainOrder(p, n);
    return 0;
}
