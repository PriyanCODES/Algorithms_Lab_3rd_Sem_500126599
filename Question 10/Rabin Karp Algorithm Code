#include <stdio.h>
#include <string.h>
#define d 256 // Number of characters in the input alphabet (for ASCII)
#define q 101 // A prime number for modulus to reduce hash collisions
void rabinKarp(char text[], char pattern[]) {
    int n = strlen(text);      
    int m = strlen(pattern);   
    int i, j;                  
    int p = 0;                 
    int t = 0;                 
    int h = 1;                
    // Calculate the value of h = d^(m-1) % q
    for (i = 0; i < m - 1; i++) {
        h = (h * d) % q;
    }
    for (i = 0; i < m; i++) {
        p = (d * p + pattern[i]) % q;
        t = (d * t + text[i]) % q;
    }
    // Slide the pattern over text one character at a time
    for (i = 0; i <= n - m; i++) {
        if (p == t) {
            for (j = 0; j < m; j++) {
                if (text[i + j] != pattern[j]) {
                    break;
                }
            }
            if (j == m) {
                printf("Pattern found at index %d\n", i);
            }
        }
        if (i < n - m) {
            t = (d * (t - text[i] * h) + text[i + m]) % q;
            if (t < 0) {
                t = t + q;
            }
        }
    }
}
int main() {
    char text[] = "ABCCDDAEFGABCD";
    char pattern[] = "ABCD";
    rabinKarp(text, pattern);
    return 0;
}
