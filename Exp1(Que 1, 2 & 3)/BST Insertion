#include<stdio.h>
#include<stdlib.h>
struct Node{
    int data;
    struct Node* left;
    struct Node* right;
};
struct Node* createNode(int data){
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = newNode->right = NULL;
    return newNode;
};
struct Node* insertNode(struct Node* root, int data){
    struct Node* newNode = createNode(data);
    if (root == NULL){
        return newNode; 
    }
    struct Node* current = root;
    struct Node* parent = NULL;
    while (current != NULL){
        parent = current; 
        if (data < current->data){
            current = current->left; 
        }
        else if (data > current->data){
            current = current->right; 
        }
        else{
            return root;
        }
    }
    if (data < parent->data){
        parent->left = newNode;
    }
    else{
        parent->right = newNode;
    }
    return root;
}
void inorderTraversal(struct Node* root){
    if (root != NULL){
        inorderTraversal(root->left);
        printf("%d ", root->data);
        inorderTraversal(root->right);
    }
}
int main(){
    struct Node* root = NULL;
    int n, data;
    printf("Enter the number of elements: ");
    scanf("%d", &n);
    int* values = (int*)malloc(n * sizeof(int));
    printf("Enter the elements:\n");
    for (int i = 0; i < n; i++){
        scanf("%d", &values[i]);
    }
    for (int i = 0; i < n; i++){
        root = insertNode(root, values[i]);
    }
    printf("Inorder traversal of the BST: ");
    inorderTraversal(root);
    printf("\n");
    free(values);
    return 0;
}
